//  (c) Copyright 2013 Hewlett-Packard Development Company, L.P.
//  Autogenerated
package com.fct.tm.rs;

import static org.easymock.EasyMock.createMock;
import static org.easymock.EasyMock.expect;
import static org.easymock.EasyMock.replay;
import static org.easymock.EasyMock.verify;

import java.util.UUID;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;

import javax.ws.rs.core.MediaType;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.hp.util.rs.ResourceTest;
import com.hp.sdn.rs.misc.ControllerResourceTest;

import com.fct.tm.model.trffcmngr;
import com.fct.tm.api.trffcmngrService;

import com.hp.api.Id;


/**
 * Sample trffcmngr REST API resource.
 */
public class trffcmngrResourceTest extends ControllerResourceTest {

    private trffcmngrService svc;
    
    /**
     * Creates a test suite on the default package set.
     */
    public trffcmngrResourceTest() {
        super("com.fct.tm.rs");
    }
    

    @Override
    @Before
    public void setUp() throws Exception {
        super.setUp();
        svc = createMock(trffcmngrService.class);

        sl.register(trffcmngrService.class, svc,
                    Collections.<String, Object> emptyMap());

        // If a specific test case expects a different format, such
        // format will have to be set calling this method.
        ResourceTest.setDefaultMediaType(MediaType.APPLICATION_JSON);
    }
    
    @Override
    @After
    public void tearDown() throws Exception {
        super.tearDown();
        sl.unregister(trffcmngrService.class, svc);
    }   

//    @Test
//    public void addtrffcmngr() {
//        trffcmngr s = new trffcmngr("Thingie");
//        
//       // expect(svc.create("Thingie"))
//       //     .andReturn(s);
//        replay(svc);
//        
//        String r = post("trffcmngr",  
//                        "{\"item\":{\"name\":\"Thingie\"}}");
//        assertResponseContains(r, "\"uid\":\"" + s.getId().getValue() + "\"", "\"name\":\"Thingie\"");
//        verify(svc);
//    }

//    @Test
//    public void gettrffcmngr() {
//        Id<trffcmngr, UUID> id = Id.valueOf(UUID.randomUUID());
//        
//        //expect(svc.get(id)).andReturn(new trffcmngr(id, "Thingie"));
//        replay(svc);
//        
//        String r = get("trffcmngr/" + id.getValue());
//        assertResponseContains(r, "\"uid\":\"" + id.getValue() + "\"", "\"name\":\"Thingie\"");
//        verify(svc);
//    }

//    @Test
//    public void getAll() {
//        Id<trffcmngr, UUID> id1 = Id.valueOf(UUID.randomUUID());
//        Id<trffcmngr, UUID> id2 = Id.valueOf(UUID.randomUUID());
//
//        Collection<trffcmngr> c = new HashSet<trffcmngr>();
//        c.add(new trffcmngr(id1, "Thingie"));
//        c.add(new trffcmngr(id2, "Doo-Hickey"));
//        //expect(svc.getAll()).andReturn(c);
//        replay(svc);
//
//        String r = get("trffcmngr");
//        assertResponseContains(r, "\"trffcmngr\":[",
//                               "{\"uid\":\"" + id1.getValue() + "\"", "{\"uid\":\"" + id2.getValue() + "\"");
//        verify(svc);
//    }
//
//    @Test
//    public void deletetrffcmngr() {
//        Id<trffcmngr, UUID> id = Id.valueOf(UUID.randomUUID());
//        
//        //svc.delete(id);
//        replay(svc);
//        
//        String r = delete("trffcmngr/" + id.getValue());
//        verify(svc);
//    }
}
